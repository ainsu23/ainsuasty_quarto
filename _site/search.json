[
  {
    "objectID": "rworld/DataScience/HOML_tidymodels.html",
    "href": "rworld/DataScience/HOML_tidymodels.html",
    "title": "Hands On Machine Learning with R",
    "section": "",
    "text": "Getting very good understanding and skilled applying machine learning it is very important, for this reason, I started learning with the book hands on machine learning with tidymodels\nThis post contains notes and solutions to the exercises for each chapter of the book."
  },
  {
    "objectID": "rworld/DataScience/HOML_tidymodels.html#data-splitting-rsample",
    "href": "rworld/DataScience/HOML_tidymodels.html#data-splitting-rsample",
    "title": "Hands On Machine Learning with R",
    "section": "1. Data Splitting {rsample}",
    "text": "1. Data Splitting {rsample}\nMachine learning models requires data in order to teach the model. This data needs to be separated in two. Data used from package: {modeldata}\n\nsimple sampleStratified sampleDown-SamplingUp-Sampling\n\n\n\nset.seed(123)  # for reproducibility\nsplit <- rsample::initial_split(modeldata::attrition, prop = 0.7)\ntrain <- rsample::training(split)\ntest <- rsample::testing(split)\nrbind(\n  table(train$Attrition) %>% prop.table(),\n  table(test$Attrition) %>% prop.table()\n) %>% as_tibble()\n\n# A tibble: 2 × 2\n     No   Yes\n  <dbl> <dbl>\n1 0.843 0.157\n2 0.830 0.170\n\n\n\n\nIn case the variable response has imbalance, the split process should use stratify, this helps to keep distribution of the response variable in the splitted data.\n\nset.seed(123)  # for reproducibility\nsplit <- rsample::initial_split(modeldata::attrition, prop = 0.7,strata = \"Attrition\")\ntrain <- rsample::training(split)\ntest <- rsample::testing(split)\n\nrbind(\n  table(train$Attrition) %>% prop.table(),\n  table(test$Attrition) %>% prop.table()\n) %>% as_tibble()\n\n# A tibble: 2 × 2\n     No   Yes\n  <dbl> <dbl>\n1 0.839 0.161\n2 0.837 0.163\n\n\n\n\n“Down-sampling balances the dataset by reducing the size of the abundant class(es) to match the frequencies in the least prevalent class. This method is used when the quantity of data is sufficient. By keeping all samples in the rare class and randomly selecting an equal number of samples in the abundant class.”\n\n\n“On the contrary, up-sampling is used when the quantity of data is insufficient. It tries to balance the dataset by increasing the size of rarer samples. Rather than getting rid of abundant samples, new rare samples are generated by using repetition or bootstrapping”\n\n\n\n\nTrain Data\nTrain Data “used to develop feature sets, train our algorithms, tune hyperparameters, compare models, and all of the other activities required to choose a final model (e.g., the model we want to put into production).”\n\n\n\n\nflowchart LR\n  id1[(DataBase)]  --> A((Train))\n  subgraph Training\n    direction TB\n    subgraph Resampling\n    B[resample 1]\n    C[resample 2]\n    D[resample 3]\n    end\n    subgraph Model_1\n    E[Develop] --> F[Evaluate]\n    G[Develop] --> H[Evaluate]\n    I[Develop] --> J[Evaluate]\n    end\n    subgraph Model_2\n    K[Develop] --> L[Evaluate]\n    M[Develop] --> N[Evaluate]\n    O[Develop] --> P[Evaluate]\n    end\n    subgraph Model_n\n    Q[Develop] --> R[Evaluate]\n    S[Develop] --> T[Evaluate]\n    U[Develop] --> V[Evaluate]\n    end\n  end \n  A -- Data into samples --> Resampling\n  Resampling -- Create --> Model_1\n  Model_1 -- Tune --> Model_2\n  Model_2 -- Tune --> Model_n\n  \n\n\n\n\n\n\n\n\nOnce the best model is selected it is time to test the model with the test data. Training (60% - 80%) and Testing (40% - 20%). It’s importante to not pass this limits because you can fall in a overfitting.\n\n\nTest data\nTest data: “having chosen a final model, these data are used to estimate an unbiased assessment of the model’s performance, which we refer to as the generalization error.”"
  },
  {
    "objectID": "rworld/DataScience/HOML_tidymodels.html#modelling-in-r",
    "href": "rworld/DataScience/HOML_tidymodels.html#modelling-in-r",
    "title": "Hands On Machine Learning with R",
    "section": "2. Modelling in R",
    "text": "2. Modelling in R\nThere are different ways to create a formulas depending on the engine used. In order to test the model, we should not use the test data, instead, training data should be splitied using resampling methods,"
  },
  {
    "objectID": "rworld/DataScience.html",
    "href": "rworld/DataScience.html",
    "title": "Data Science",
    "section": "",
    "text": "AMPL R API\n\n\n\nPrescriptive Analytics\n\n\nAMPL\n\n\nMIP\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands On Machine Learning with R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "rworld/Shiny/data_structures.html",
    "href": "rworld/Shiny/data_structures.html",
    "title": "Data Structures",
    "section": "",
    "text": "Go to App\nCheck code here\n\nThe idea behind this application is to learn and create apps from data structures field.\nDouble linked list representation with random words. The user should guess the word from the wordcloud, the letters introduced are compared to a linkedlist saved in a R6Class."
  },
  {
    "objectID": "rworld/Shiny/learning_polish.html",
    "href": "rworld/Shiny/learning_polish.html",
    "title": "Learning Polish",
    "section": "",
    "text": "Go to App\nCheck code here\n\nThis application contains different modules:\n\nVocabulary: Connects with google firebase where data for this app is stored. In that way, words can be added, deleted or modified in real time using R functions\nGames: Contains two games\n\nBucket list: Drag and drop words into categories\nGuess word: Guess word in the correct order"
  },
  {
    "objectID": "rworld/Shiny/mastering_shiny.html",
    "href": "rworld/Shiny/mastering_shiny.html",
    "title": "Mastering Shiny",
    "section": "",
    "text": "This application solves exercises proposed on each chapter of the book.\n\nGo to App\nCheck code here"
  },
  {
    "objectID": "rworld/Shiny.html",
    "href": "rworld/Shiny.html",
    "title": "Shiny",
    "section": "",
    "text": "Data Structures\n\n\nApp with application of Data Structures\n\n\n\nR6Class\n\n\nData Structures\n\n\n\nApp to develop data structure applications\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Polish\n\n\nApp with interactive games.\n\n\n\nfirebase\n\n\nAPI\n\n\n\nApp created to learn polish in an interactive way with games developed\n\n\n\n\n\n\n\n\n\n\n\n\n\nMastering Shiny\n\n\nBy Hadley Wickham\n\n\n\nmodules\n\n\n\nSolution to exercices mastering Shiny’s book.\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "rworld.html",
    "href": "rworld.html",
    "title": "RWorld",
    "section": "",
    "text": "Blog\n\n\nR, Python, SQL, Spark, among others\n\n\nGeneral tips for R, Git, SQL or python.\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Science\n\n\nWith tidymodels\n\n\nMachine learning models developed with tidymodels\n\n\n\n\n\n\n\n\n\n\n\n\n\nShiny\n\n\nApps\n\n\nDashboards created with Shiny library for R\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Andrés Felipe Insuasty Ch.",
    "section": "",
    "text": "Hola | Hi | Cześć\nI love learn and share what I have learned, for that reason, I share with you personal experiences and profesional projects developing Data Science."
  },
  {
    "objectID": "rworld/DataScience/HOML_tidymodels.html#resampling-methods",
    "href": "rworld/DataScience/HOML_tidymodels.html#resampling-methods",
    "title": "Hands On Machine Learning with R",
    "section": "3. Resampling methods",
    "text": "3. Resampling methods\n“Provide an alternative approach by allowing us to repeatedly fit a model of interest to parts of the training data and test its performance on other parts. The two most commonly used resampling methods include k-fold cross validation and bootstrapping.”\n\nK-fold cross validationBootstrapping\n\n\nPrincipal idea of k-fold where the training data is divided into training samples and one testing sample, so you can test within the fold created. This procedure is repeated k times. In practices, k = 5 or k = 10 is common.\n“Although using k ≥ 10 helps to minimize the variability in the estimated performance, k-fold CV still tends to have higher variability than bootstrapping (discussed next). Kim (2009) showed that repeating k-fold CV can help to increase the precision of the estimated generalization error. Consequently, for smaller data sets (say n<10,000, 10-fold CV repeated 5 or 10 times will improve the accuracy of your estimated performance and also provide an estimate of its variability.”\n\nrsample::vfold_cv(modeldata::ames, v = 10)\n\n#  10-fold cross-validation \n# A tibble: 10 × 2\n   splits             id    \n   <list>             <chr> \n 1 <split [2637/293]> Fold01\n 2 <split [2637/293]> Fold02\n 3 <split [2637/293]> Fold03\n 4 <split [2637/293]> Fold04\n 5 <split [2637/293]> Fold05\n 6 <split [2637/293]> Fold06\n 7 <split [2637/293]> Fold07\n 8 <split [2637/293]> Fold08\n 9 <split [2637/293]> Fold09\n10 <split [2637/293]> Fold10\n\n\n\n\nRandom samples of the data with replacement “Since observations are replicated in bootstrapping, there tends to be less variability in the error measure compared with k-fold CV (Efron 1983). However, this can also increase the bias of your error estimate. This can be problematic with smaller data sets; however, for most average-to-large data sets (say n≥1,000) this concern is often negligible.”\n\nrsample::bootstraps(modeldata::ames, times = 10)\n\n# Bootstrap sampling \n# A tibble: 10 × 2\n   splits              id         \n   <list>              <chr>      \n 1 <split [2930/1062]> Bootstrap01\n 2 <split [2930/1076]> Bootstrap02\n 3 <split [2930/1066]> Bootstrap03\n 4 <split [2930/1045]> Bootstrap04\n 5 <split [2930/1087]> Bootstrap05\n 6 <split [2930/1108]> Bootstrap06\n 7 <split [2930/1075]> Bootstrap07\n 8 <split [2930/1078]> Bootstrap08\n 9 <split [2930/1053]> Bootstrap09\n10 <split [2930/1067]> Bootstrap10\n\n\n\n\n\nFollowing image shows distribution for each approach, each graphs was generated from the book."
  },
  {
    "objectID": "rworld/DataScience/HOML_tidymodels.html#bias-variance-trade-off",
    "href": "rworld/DataScience/HOML_tidymodels.html#bias-variance-trade-off",
    "title": "Hands On Machine Learning with R",
    "section": "4. Bias variance trade-off",
    "text": "4. Bias variance trade-off\nBias variance trade-off"
  },
  {
    "objectID": "rworld/DataScience/HOML_tidymodels.html#model-evaluation",
    "href": "rworld/DataScience/HOML_tidymodels.html#model-evaluation",
    "title": "Hands On Machine Learning with R",
    "section": "5. Model evaluation",
    "text": "5. Model evaluation\nModel evaluation"
  },
  {
    "objectID": "rworld/DataScience/HOML_tidymodels.html#target-engineering",
    "href": "rworld/DataScience/HOML_tidymodels.html#target-engineering",
    "title": "Hands On Machine Learning with R",
    "section": "1. Target Engineering",
    "text": "1. Target Engineering\nSome models, for example, parametrics ones. Assumes that their response variable and the error are normally distributed. Therefore, it is important to review distribution before start modelling, this might improve the prediction.\nOne way to correct not normally distribution is with the log or BoxCox function. “However, we should think of the preprocessing as creating a blueprint to be re-applied strategically. For this, you can use the recipe package or something similar (e.g., caret::preProcess()). This will not return the actual log transformed values but, rather, a blueprint to be applied later.”\n\n# Log transformation applied to all outcomes\names_recipe <- recipe(Sale_Price ~ ., data = ames_train) %>%\n  step_log(all_outcomes()) # OR\n  # step_BoxCox(all_outcomes())\n\nIn case the response variable has negatives, the previous approach might conduct to NAs values, then, step_YeoJohnson() can be applied."
  },
  {
    "objectID": "rworld/DataScience/HOML_tidymodels.html#dealing-with-missingness",
    "href": "rworld/DataScience/HOML_tidymodels.html#dealing-with-missingness",
    "title": "Hands On Machine Learning with R",
    "section": "2. Dealing with missingness",
    "text": "2. Dealing with missingness\nI strongly recommend to use naniar package to check missings values in the df. naniar::vis_miss()\n\nSome missing values might be an error caused by the construction of the data, so, this requires to analyse. In case, Data is well built, imputation values can be used. Please check the following:"
  },
  {
    "objectID": "rworld/DataScience/HOML_tidymodels.html#feature-filtering",
    "href": "rworld/DataScience/HOML_tidymodels.html#feature-filtering",
    "title": "Hands On Machine Learning with R",
    "section": "3. Feature filtering",
    "text": "3. Feature filtering\n\n\n\n\n\n\nImportant\n\n\n\nFor some models, increasing features not always make the output better, instead, it can affect the processing time and cost of computation.\n\n\nThe following images are taken from the book referenced at the beginning of the blog. On the left, it shows the performance metric vs # features and on the right, it shows the processing time taken to train a model.\n\nPerformance vs FeaturesProcessing Time vs Features\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nZero and near-zero variance variables are target to eliminate as features! Meaning the feature only has a single value or not useful information to the model\n\n\nIn order to remove zero or near-zero variables, use the following functions from recipes packages:\n\names_recipe %>% \n  recipes::step_nzv() %>% # near zero variance elimiate\n  recipes::step_zv() # zero variance eliminate\n\n\nNumeric feature engineering\n\nSkewnessStandarization\n\n\nIn order to correct Skewness, normalize. Use BoxCox for positive features, in case of negative features use YeoJohnson.\n\names_recipe %>% \n  recipes::step_BoxCox() #positive features\n  # recipes::step_YeoJohnson() #include negative features\n\n\n\n“Standarization includes centering and scaling so that numeric variables have zero mean and unit variance, which provides a common comparable unit of measure across all the variables”\n“Models that incorporate smooth functions of input features are sensitive to the scale of the inputs. Many algorithms use linear functions within their algorithms, some more obvious (e.g., GLMs and regularized regression) than others (e.g., neural networks, support vector machines, and principal components analysis). Other examples include algorithms that use distance measures such as the Euclidean distance (e.g., k nearest neighbor, k-means clustering, and hierarchical clustering).”\n\n\n\n\n\n\nImportant\n\n\n\nHowever, you should standardize your variables within the recipe blueprint so that both training and test data standardization are based on the same mean and variance. This helps to minimize data leakage\n\n\n\names_recipe %>%\n  step_center(all_numeric(), -all_outcomes()) %>%\n  step_scale(all_numeric(), -all_outcomes())\n\n\n\n\n\n\nCategorical feature engineering\nSome models requires all features to be numerical.\n\nLumping\nIn some cases, there are some levels of a categorical variable that have few observations, therefore, we can agrupated them in one level with step_other. However, lumping should be used sparingly as there is often a loss in model performance (Kuhn, Max, and Kjell Johnson. 2013. Applied Predictive Modeling. Vol. 26. Springer.).\n\n\nOne-hot & dummy encoding\nA categorical column could be converted to a set of binaries variables. However, some models, such as, ordinary linear regression and neural networks, might have problems with collinearity (collinearity, in statistics, correlation between predictor variables (or independent variables), such that they express a linear relationship in a regression model. When predictor variables in the same regression model are correlated, they cannot independently predict the value of the dependent variable). Therefore, dummy step would remove one binary variable to not create a collinearity.\n\nrecipe(Sale_Price ~ ., data = ames_train) %>%\n  step_dummy(all_nominal(), one_hot = TRUE) # One-hot encoding\n  # step_dummy(all_nominal()) # dummy encoding\n\n\n\n\nLabel encoding\nIt generates the number order of the levels and it is done with step_integer()\n\n\n\n\n\n\nImportant\n\n\n\nFor ordered factors you could also use step_ordinalscore().\n\n\n\n\nPutting the process together\nProcess together Fundamentals"
  },
  {
    "objectID": "more.html",
    "href": "more.html",
    "title": "And more",
    "section": "",
    "text": "About me\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "more/about_me.html",
    "href": "more/about_me.html",
    "title": "About me",
    "section": "",
    "text": "(a) MSc in Statistics and Operation Research\n\n\n\n\n\n\n\n(b) Travelling\n\n\n\n\nFigure 1: Happy moments\nMy name is Andrés Felipe Insuasty Ch. (Please call me: Insu),\nI am from Cali, Colombia. Capital of salsa dancing 💃, full of tastes in its food, beauty of the people and great parties or festivals .\nOn 2022 I got married  in Pasto, Colombia with Klaudia from Poland, On 23rd of September 2022, I turned 32 years in Bogotá. Same year, on November, I will be the father  of Oliver.\nCheck my resume for professional information"
  },
  {
    "objectID": "more/about_me.html#projects",
    "href": "more/about_me.html#projects",
    "title": "About me",
    "section": "PROJECTS 📖",
    "text": "PROJECTS 📖\nAll would be uploaded to my GitHub\n\nHOBBIES 😎\nSome fun facts about me:\n\nI used to practice Karate , Soccer .\nI love biking and jogging.\nLove dancing Salsa\nLearning to take pictures Check my Instagram 📷\nSome cooking recipies explained by me:\n\n\nRacuchy de Manzana, Polish recipy 🍎😋\n\n\nTravelling a lot around the world✈️🚄\n\nThanks for reading!"
  },
  {
    "objectID": "rworld/DataScience/AMPL_R_API.html",
    "href": "rworld/DataScience/AMPL_R_API.html",
    "title": "AMPL R API",
    "section": "",
    "text": "Have you ever asked, How to optimize your commercial process with Mathematical Optimization (field: Operations Research)?\nOperations Research is an old field that have had improved many industries around the world with the use of mathematics, it helps to model a real problem with an objective function and constrains associated to it.\nIn this post, I would show how you can run an optimization problem from R using the integration with AMPL (Optimization software). To get more details about this integration, please follow this link"
  },
  {
    "objectID": "rworld/DataScience/AMPL_R_API.html#easy-example",
    "href": "rworld/DataScience/AMPL_R_API.html#easy-example",
    "title": "AMPL R API",
    "section": "Easy example",
    "text": "Easy example\n\n# env <- new(Environment, \"full path to the AMPL installation directory\")\nampl <- new(AMPL, env)\n\nampl$eval(\"var x;\")\nampl$eval(\"maximize z: x;\")\nampl$eval(\"subject to c: x<=10;\")\n\nx <- ampl$getVariable(\"x\")\n\nampl$solve()\n\nMINOS 5.51: optimal solution found.\n1 iterations, objective 10\n\n#\n# # At this point x$value() evaluates to 10\nprint(x$value())  # prints 10\n\n[1] 10\n\nampl$close()"
  },
  {
    "objectID": "rworld/DataScience/AMPL_R_API.html#class-structure",
    "href": "rworld/DataScience/AMPL_R_API.html#class-structure",
    "title": "AMPL R API",
    "section": "Class structure",
    "text": "Class structure\nThe idea behind this package is to manage the optimization problem as an instance of a class.\nThat means a variable with the content of the class needs to be created. this object will contains the structure of the problem, each time the user introduces new information. The optimization formulation is build in the eval method.\nIn case you struggle with this concept of classes, you can check the post Data Structures with R6Class\n\n# env <- new(Environment, \"full path to the AMPL installation directory\")\nampl <- new(AMPL, env)\n\nampl$eval(\"var x;\")\nampl$eval(\"maximize z: x;\")\nampl$eval(\"subject to c: x<=10;\")\n\nx <- ampl$getVariable(\"x\")\n\nampl$solve()\n\nMINOS 5.51: optimal solution found.\n1 iterations, objective 10\n\n#\n# # At this point x$value() evaluates to 10\nprint(x$value())  # prints 10\n\n[1] 10\n\nampl$close()"
  },
  {
    "objectID": "rworld/Blog.html",
    "href": "rworld/Blog.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nDescription\n\n\nCategories\n\n\nReading Time\n\n\n\n\n\n\nData Structures with R6Class\n\n\nImplement data structures with R6Class\n\n\nR6Class,Data Structures\n\n\n3 min\n\n\n\n\nHow to interact with firebase from a shinyapp\n\n\nFind how to use httr to access or modify stored data in firebase.\n\n\nFirebase\n\n\n4 min\n\n\n\n\nPowerBI Leverage with R\n\n\nLeverage PowerBI apps with R\n\n\nPowerBI,R,functions\n\n\n2 min\n\n\n\n\nUso de Spark desde R\n\n\nBig data con Spark y R\n\n\nSpark,R6Class,Text mining\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "rworld/Blog/data_structures.html",
    "href": "rworld/Blog/data_structures.html",
    "title": "Data Structures with R6Class",
    "section": "",
    "text": "Data Structures\nThis post is oriented to create classes that recreates data structures and explanaition for each. Knowing this may help you improve as a programmer because is the basic of each language you would work R, python, c, javascript, others..\nData structures to work with:\n\nArrays\nLinkedLists\nHashtable\nStacks\nQueues\nTrees\nGraphs\n\n\nArraysLinkedLists\n\n\nR manages dinamics vectors, this means that one index can be added to an existed vector. For the purpose of this blog I would create a class R6Class to simmulate an Array. Within this array, you would be able to get an index, push a new item at the end, pop last item, delete an index.\n\nmyarray <- R6::R6Class(\n  classname = \"myarray\",\n  public = list(\n    initialize = function() {\n      self$array_length <- 0\n      self$array_data <- c()\n    },\n    array_length = NULL,\n    array_data = NULL,\n    get_value = function(index) {\n      return(self$array_data[index])\n    },\n    push = function(value) {\n      self$array_data[self$array_length + 1] = value\n      self$array_length <- length(self$array_data)\n    },\n    pop = function() {\n      lastItem <- self$array_data[self$array_length]\n      self$array_data <- self$array_data[-self$array_length]\n      self$array_length <- length(self$array_data)\n      return(lastItem)\n    },\n    delete = function(index) {\n      self$array_data <- self$array_data[-index]\n      self$array_length <- length(self$array_data)\n    }\n  )\n)\nmyarray = myarray$new()\nmyarray$push(2)\nmyarray$pop()\n\n\n\nLinkedLists are a set of nodes (that contains information related to where the data is stored in pc memory (pointers) and which node is next or previous). Until my understanding, R does not have linkedList in its implementation, list are manage as vectors or arrays. There exists 2 types or linked lists, one is single which it has just one direction and double which has two directions.\nNevertheless, let’s implement an double linkedList with R6Class:\n\nmy_Linked_List <- R6::R6Class(\n  classname = \"linkedList\",\n  public = list(\n    # Initialize with the first value of the linkedList, .next would be NULL\n    initialize = function(value) {\n      self$list_pointer <- list(new.env())\n      self$list_pointer[[1]]$value <- value\n      self$index_head <- 1\n      self$index_tail <- 1\n      self$list_pointer[[1]]$index_next <- NULL\n      self$list_pointer[[1]]$index_prev <- NULL\n    },\n    list_pointer = NULL,\n    index_head = NULL,\n    index_tail = NULL,\n    # next is an used variable from R.\n    get_index = function(index) {\n      if (self$index_tail < index) stop(\"index not created yet!\")\n      return(self$list_pointer[[index]]$value)\n    },\n    insert = function(value) {\n      self$list_pointer <- self$list_pointer %>%\n        append(new.env())\n      self$index_tail <- self$index_tail + 1\n      self$list_pointer[[self$index_tail]]$index_prev <-\n        self$list_pointer[[self$index_tail - 1]]\n      self$list_pointer[[self$index_tail - 1]]$index_next <-\n        self$list_pointer[[self$index_tail]]\n      self$list_pointer[[self$index_tail]]$value <- value\n      self$list_pointer[[self$index_tail]]$index_next <- NULL\n      return(self$list_pointer)\n    }\n  )\n)"
  },
  {
    "objectID": "rworld/DataScience/AMPL_R_API.html#rampl-manage-class-structure",
    "href": "rworld/DataScience/AMPL_R_API.html#rampl-manage-class-structure",
    "title": "AMPL R API",
    "section": "rAMPL manage Class structure",
    "text": "rAMPL manage Class structure\nThe idea behind this package is to manage the optimization problem as an instance of a class.\nThat means a variable with the content of the class needs to be created. This object will contains the structure of the problem, each time the user need to introduces\ninformation. For example: the optimization formulation is build in the eval method or loaded from a .mod file.\nIn case you struggle with this concept of classes, you can check the post Data Structures with R6Class\n\n# env <- new(Environment, \"full path to the AMPL installation directory\")\nampl <- new(AMPL, env)\n\nampl$eval(\"var x;\")\nampl$eval(\"maximize z: x;\")\nampl$eval(\"subject to c: x<=10;\")\n\nx <- ampl$getVariable(\"x\")\n\nampl$solve()\n\nMINOS 5.51: optimal solution found.\n1 iterations, objective 10\n\n#\n# # At this point x$value() evaluates to 10\nprint(x$value())  # prints 10\n\n[1] 10\n\nampl$close()"
  },
  {
    "objectID": "rworld/DataScience/AMPL_R_API.html#assign-clients-to-commercials",
    "href": "rworld/DataScience/AMPL_R_API.html#assign-clients-to-commercials",
    "title": "AMPL R API",
    "section": "Assign clients to commercials",
    "text": "Assign clients to commercials\nIn a previous job, I worked as the responsible of commercials campaigns and one task was to assign the clients to the commercials having into account some constrains; such as:\n\nMonthly capacity by hierarchy\nOne client had to be attended by one salesperson\nOne commercial with XX knowledge could not attend one client that would requires attention on KK.\n\nThis task was done with excel creating pivot tables and crossing them and counting manually which client was assigned and tried to reach the capacity constrain. Nevertheless, this problem is a classic problem to be solved with operations research.\n\nParameters\n\nn_clients <- 84\nn_commercials <- 4\nn_campaigns <- 4\nn_rol <- 3\n\n\n\nData\nThe data used was generated using R and stored in dataframes. AMPL can read dataframes, so it is not need of having the data vectorized, as for example, in ompr package.\n\nCommercialClientsCampaignsJoined tables\n\n\nThis table has the list of workers in sales. For each person, contains the rol, the conversion_rate (average), and capacity in the month.\n\ncommercials <- data.frame(\n  \"seller_id\" = sample(1:n_commercials, replace = FALSE),\n  \"rol\" = 1:n_commercials %>% \n      purrr::map(function(x){\n        sample(LETTERS[1:n_rol],1,replace = TRUE)\n      }) %>% \n    unlist(),\n  \"convertion_rate\" = sample(20:100, n_commercials, replace = FALSE) / 100\n  ) %>% \n  left_join(\n    data.frame(\n      \"rol\" = LETTERS[1:n_rol],\n      \"capacity\" = 1:n_rol %>% \n          purrr::map(function(x){\n            sample(10:20,1,replace = FALSE)\n          }) %>% \n        unlist()\n    ),\n    by = \"rol\"\n    )\ncommercials %>% arrange(seller_id) %>% DT::datatable()\n\n\n\n\n\n\n\n\nThis table has the list of clients and campaigns to be offer.\n\nclients <- data.frame(\n  \"client_id\" = sample(1:n_clients,replace = FALSE),\n  \"campaign\" = 1 %>% purrr::map(function(x){\n    paste(\"campaign_\",sample(1:n_campaigns, n_clients, replace = TRUE),sep = \"\")\n  }) %>% unlist()\n) %>% \n  left_join(\n    data.frame(\n      \"campaign\" = paste0(\"campaign_\", sample(1:n_campaigns, n_campaigns, replace = FALSE)),\n      \"benefit\" = 1:n_campaigns %>% \n          purrr::map(function(x){\n            sample(100:1000, 1, replace = FALSE)\n          }) %>% \n        unlist()\n    ),\n    by = \"campaign\"\n  )\nclients %>% arrange(client_id) %>% DT::datatable()\n\n\n\n\n\n\n\n\nThis table has which role can attend each campaign.\n\ncampaigns <- data.frame(\n  \"campaign\" = paste(\"campaign_\",1:n_campaigns,sep = \"\"),\n  \"rol\" = 1:(n_campaigns) %>% purrr::map(function(x){\n    sample(LETTERS[1:n_rol],1,replace = TRUE)\n  }) %>% unlist()\n) %>% distinct()\n\ncampaigns %>% arrange(rol) %>% DT::datatable()\n\n\n\n\n\n\n\n\nFinally, the previous tables are joined to check data before start modelling.\n\nfinnal <- clients %>% \n  left_join(campaigns, by = \"campaign\") %>% \n  left_join(commercials, by = \"rol\") %>% \n  mutate(benefit = benefit * convertion_rate)\n\nfinnal %>% DT::datatable(filter = 'top')\n\n\n\n\n\n\n\n\n\n\n\nModel\nNow it is time to model, it is a good practice (even in AMPL) to have the .model, .data and .run files separated in one folder. As I build here the data, I just create the data as vectors for sets or scalar parameters or dataframes for tables\n\nModel run in RAMPL .mod\n\n\n\n## Build data to pass AMPL Model\n\n### sets\nClients <- distinct(finnal, client_id)[,1]\nCommercials <- distinct(finnal, seller_id)[,1]\n### paramets associated to commercial\ncapacities <- distinct(finnal, seller_id, capacity)[,2]\n### parameter associated to client and commercial\nbenefit <- select(finnal, client_id, seller_id, benefit) %>% \n  tidyr::pivot_wider(names_from = seller_id, values_from = benefit) %>% \n  mutate(across(where(is.numeric), ~tidyr::replace_na(.x, 1))) %>% \n  tidyr::pivot_longer(!client_id, names_to = \"seller_id\", values_to = \"benefit\") %>% \n  mutate(seller_id = as.numeric(seller_id))\n\n## .run \nampl <- new(AMPL, env) # Create class ampl\n\n# Setting solver to be used. Due to limit license (max 300 vars or contrains), \n# I change to HiGHS solver, allowed with AMPL CE..\n# an open source solver.\nampl$setOption(\"solver\",\"HiGHS\") \n\n#reading model written in .mod file (AMPL)\nampl$read(\"models/assign.mod\") # Read model located in folder models\n\n# Defines sets data and parameters.\n\nampl$setData(data.frame(Clients = Clients), 1, \"Clients\") \nampl$setData(\n  data.frame(Commercials = Commercials, capacity = capacities), \n  1, \n  \"Commercials\"\n)\nampl$setData(benefit, 2, \"\")\n\nampl$solve()\n\nHiGHS 1.2.2: \b\b\b\b\b\b\b\b\b\b\b\b\bHiGHS 1.2.2: optimal solution; objective 16041.8\n1 branching nodes\n\n## Get objective solution\ncat(sprintf(\"Objective: %f\\n\", ampl$getObjective(\"Profit\")$value()))\n\nObjective: 16041.800000\n\n# Get the values of the variable assign in a data.frame\ndf <- ampl$getVariable(\"assign\")$getValues()\n\ndf <- df %>% \n  rename(\n    seller_id = index1,\n    client_id = index0,\n    solution = assign.val\n  ) %>% \n  mutate(solution = round(solution))\n\nampl$close()\n\n\n\nContains the formulation of the problem written in AMPL language.\n```{ampl}\n\nset Clients;\nset Commercials;\n\nparam capacity {Commercials} > 0;\nparam benefit {Clients, Commercials} >= 0;\n\nvar assign {Clients, Commercials} binary;\n\nmaximize Profit:\n  sum {i in Clients, j in Commercials} benefit[i,j] * assign[i,j];\n  \nsubject to Supply {i in Clients}:\n  sum {j in Commercials} assign[i,j] <= 1;\nsubject to capacity_constrain {j in Commercials}:\n  sum {i in Clients} assign[i,j] <= capacity[j];\n```\n\n\n\n\nSolutionConstrain capacityConstrain assign\n\n\n\n\n\n\n\n\nNote\n\n\n\nSome clients were not assigned due to capacity of the sales force.\n\n\n\ndf %>% \n  DT::datatable(filter = 'top')\n\n\n\n\n\n\n\n\n\ndf %>% \n  group_by(seller_id) %>% \n  summarise(num_clients = sum(solution)) %>% \n  DT::datatable(filter = 'top')\n\n\n\n\n\n\n\n\n\ndf %>% \n  group_by(client_id) %>% \n  summarise(num_commercials = sum(solution)) %>% \n  DT::datatable(filter = 'top')\n\n\n\n\n\n\n\n\n\nThanks for reading, Hope this would be helpfull for you or your organization."
  },
  {
    "objectID": "rworld/DataScience/AMPL_R_API.html#libraries",
    "href": "rworld/DataScience/AMPL_R_API.html#libraries",
    "title": "AMPL R API",
    "section": "Libraries",
    "text": "Libraries\nIn order to install rAMPL it is important to have the lastest version of RTools installed. Getting started session from AMPL webiste.\nAs long as I, used renv for building my blog I use the following code:\n\nrenv::install(\"https://ampl.com/dl/API/rAMPL.tar.gz\", repos=NULL, INSTALL_opts=c(\"--no-multiarch\", \"--no-staged-install\"))\n\n\nlibrary(rAMPL)\nlibrary(dplyr)\nlibrary(DT)"
  }
]